{
  "address": "0x9938842E015Af3f115286D3611176042500201DE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProposalAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upVote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "downVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "chosen",
          "type": "bool"
        }
      ],
      "name": "VoteAction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct CeloDao.Proposals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct CeloDao.Proposals[]",
          "name": "props",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContributorsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "getProposalVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "chosen",
              "type": "bool"
            }
          ],
          "internalType": "struct CeloDao.Voted[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "getProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upVote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "propoper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct CeloDao.Proposals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeholdersBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeholdersVotes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isContributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "payBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "chosen",
          "type": "bool"
        }
      ],
      "name": "performVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "chosen",
              "type": "bool"
            }
          ],
          "internalType": "struct CeloDao.Voted",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeholderStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8635211f4260e5be4506b5357eca9d3a70116f89743a7b6d6ccccdc21960624d",
  "receipt": {
    "to": null,
    "from": "0x1920bCa51C8b09094a3F014806D356deeA9Fcdc4",
    "contractAddress": "0x9938842E015Af3f115286D3611176042500201DE",
    "transactionIndex": 0,
    "gasUsed": "3444716",
    "logsBloom": "0x
    "blockHash": "0xb2e5a8527505620e2cf2361e4961f3c55d69d17fe825a86d60eae64ef68f3d7b",
    "transactionHash": "0x8635211f4260e5be4506b5357eca9d3a70116f89743a7b6d6ccccdc21960624d",
    "logs": [],
    "blockNumber": 21308874,
    "cumulativeGasUsed": "3444716",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1b9031c9d910b1e794bbfbdf55a6dff0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProposalAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"name\":\"VoteAction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct CeloDao.Proposals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct CeloDao.Proposals[]\",\"name\":\"props\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributorsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposalVote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"internalType\":\"struct CeloDao.Voted[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"propoper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct CeloDao.Proposals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeholdersBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeholdersVotes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"payBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"name\":\"performVote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"chosen\",\"type\":\"bool\"}],\"internalType\":\"struct CeloDao.Voted\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholderStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dao.sol\":\"CeloDao\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract CeloDao is AccessControl,ReentrancyGuard {\\r\\n\\r\\n    uint256 totalProposals;\\r\\n    uint256 balance;\\r\\n    address deployer;\\r\\n\\r\\n    uint256 immutable STAKEHOLDER_MIN_CONTRIBUTION = 0.1 ether;\\r\\n    uint256 immutable MIN_VOTE_PERIOD = 5 minutes;\\r\\n    bytes32 private immutable COLLABORATOR_ROLE = keccak256(\\\"collaborator\\\");\\r\\n    bytes32 private immutable STAKEHOLDER_ROLE = keccak256(\\\"stakeholder\\\");\\r\\n\\r\\n    mapping(uint256 => Proposals) private raisedProposals;\\r\\n    mapping(address => uint256[]) private stakeholderVotes;\\r\\n    mapping(uint256 => Voted[]) private votedOn;\\r\\n    mapping(address => uint256) private contributors;\\r\\n    mapping(address => uint256) private stakeholders;\\r\\n\\r\\n      struct Proposals {\\r\\n        uint256 id;\\r\\n        uint256 amount;\\r\\n        uint256 upVote;\\r\\n        uint256 downVotes;\\r\\n        uint256 duration;\\r\\n        string title;\\r\\n        string description;\\r\\n        bool paid;\\r\\n        bool passed;\\r\\n        address payable beneficiary;\\r\\n        address propoper;\\r\\n        address executor;\\r\\n    }\\r\\n\\r\\n     struct Voted {\\r\\n        address voter;\\r\\n        uint256 timestamp;\\r\\n        bool chosen;\\r\\n    }\\r\\n\\r\\n     modifier stakeholderOnly(string memory message) {\\r\\n        require(hasRole(STAKEHOLDER_ROLE,msg.sender),message);\\r\\n        _;\\r\\n    }\\r\\n    modifier contributorOnly(string memory message){\\r\\n        require(hasRole(COLLABORATOR_ROLE,msg.sender),message);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDeployer(string memory message) {\\r\\n        require(msg.sender == deployer,message);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     event ProposalAction(\\r\\n        address indexed creator,\\r\\n        bytes32 role,\\r\\n        string message,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n     event VoteAction(\\r\\n        address indexed creator,\\r\\n        bytes32 role,\\r\\n        string message,\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        uint256 upVote,\\r\\n        uint256 downVotes,\\r\\n        bool chosen\\r\\n    );\\r\\n\\r\\n     constructor(){\\r\\n        deployer = msg.sender;\\r\\n    }\\r\\n\\r\\n       // proposal creation\\r\\n    function createProposal (\\r\\n        string calldata title,\\r\\n        string calldata description,\\r\\n        address beneficiary,\\r\\n        uint256 amount\\r\\n    )external stakeholderOnly(\\\"Only stakeholders are allowed to create Proposals\\\") returns(Proposals memory){\\r\\n        uint256 currentID = totalProposals++;\\r\\n        Proposals storage StakeholderProposal = raisedProposals[currentID];\\r\\n        StakeholderProposal.id = currentID;\\r\\n        StakeholderProposal.amount = amount;\\r\\n        StakeholderProposal.title = title;\\r\\n        StakeholderProposal.description = description;\\r\\n        StakeholderProposal.beneficiary = payable(beneficiary);\\r\\n        StakeholderProposal.duration = block.timestamp + MIN_VOTE_PERIOD;\\r\\n\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            'Proposal Raised',\\r\\n            beneficiary,\\r\\n            amount\\r\\n        );\\r\\n        return StakeholderProposal;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // voting\\r\\n    function performVote(uint256 proposalId,bool chosen) external\\r\\n    stakeholderOnly(\\\"Only stakeholders can perform voting\\\")\\r\\n    returns(Voted memory)\\r\\n    {\\r\\n        Proposals storage StakeholderProposal = raisedProposals[proposalId];\\r\\n        handleVoting(StakeholderProposal);\\r\\n        if(chosen) StakeholderProposal.upVote++;\\r\\n        else StakeholderProposal.downVotes++;\\r\\n\\r\\n        stakeholderVotes[msg.sender].push(\\r\\n            StakeholderProposal.id\\r\\n        );\\r\\n        votedOn[StakeholderProposal.id].push(\\r\\n            Voted(\\r\\n                msg.sender,\\r\\n                block.timestamp,\\r\\n                chosen\\r\\n            )\\r\\n        );\\r\\n\\r\\n        emit VoteAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"PROPOSAL VOTE\\\",\\r\\n            StakeholderProposal.beneficiary,\\r\\n            StakeholderProposal.amount,\\r\\n            StakeholderProposal.upVote,\\r\\n            StakeholderProposal.downVotes,\\r\\n            chosen\\r\\n        );\\r\\n\\r\\n        return Voted(\\r\\n            msg.sender,\\r\\n            block.timestamp,\\r\\n            chosen\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    // handling vote\\r\\n    function handleVoting(Proposals storage proposal) private {\\r\\n        if (proposal.passed || proposal.duration <= block.timestamp) {\\r\\n            proposal.passed = true;\\r\\n            revert(\\\"Time has already passed\\\");\\r\\n        }\\r\\n        uint256[] memory tempVotes = stakeholderVotes[msg.sender];\\r\\n        for (uint256 vote = 0; vote < tempVotes.length; vote++) {\\r\\n            if (proposal.id == tempVotes[vote])\\r\\n                revert(\\\"double voting is not allowed\\\");\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n     // pay beneficiary\\r\\n    function payBeneficiary(uint proposalId) external\\r\\n    stakeholderOnly(\\\"Only stakeholders can make payment\\\") onlyDeployer(\\\"Only deployer can make payment\\\") nonReentrant() returns(uint256){\\r\\n        Proposals storage stakeholderProposal = raisedProposals[proposalId];\\r\\n        require(balance >= stakeholderProposal.amount, \\\"insufficient fund\\\");\\r\\n        if(stakeholderProposal.paid == true) revert(\\\"payment already made\\\");\\r\\n        if(stakeholderProposal.upVote <= stakeholderProposal.downVotes) revert(\\\"insufficient votes\\\");\\r\\n\\r\\n        pay(stakeholderProposal.amount,stakeholderProposal.beneficiary);\\r\\n        stakeholderProposal.paid = true;\\r\\n        stakeholderProposal.executor = msg.sender;\\r\\n        balance -= stakeholderProposal.amount;\\r\\n\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"PAYMENT SUCCESSFULLY MADE!\\\",\\r\\n            stakeholderProposal.beneficiary,\\r\\n            stakeholderProposal.amount\\r\\n        );\\r\\n\\r\\n        return balance;\\r\\n\\r\\n    }\\r\\n\\r\\n    // paymment functionality\\r\\n    function pay(uint256 amount,address to) internal returns(bool){\\r\\n        (bool success,) = payable(to).call{value : amount}(\\\"\\\");\\r\\n        require(success, \\\"payment failed\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n      // contribution functionality\\r\\n    function contribute() payable external returns(uint256){\\r\\n        require(msg.value > 0 ether, \\\"invalid amount\\\");\\r\\n        if (!hasRole(STAKEHOLDER_ROLE, msg.sender)) {\\r\\n            uint256 totalContributions = contributors[msg.sender] + msg.value;\\r\\n\\r\\n            if (totalContributions >= STAKEHOLDER_MIN_CONTRIBUTION) {\\r\\n                stakeholders[msg.sender] = msg.value;\\r\\n                contributors[msg.sender] += msg.value;\\r\\n                 _grantRole(STAKEHOLDER_ROLE,msg.sender);\\r\\n                 _grantRole(COLLABORATOR_ROLE, msg.sender);\\r\\n            }\\r\\n            else {\\r\\n                contributors[msg.sender] += msg.value;\\r\\n                 _grantRole(COLLABORATOR_ROLE,msg.sender);\\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            stakeholders[msg.sender] += msg.value;\\r\\n            contributors[msg.sender] += msg.value;\\r\\n        }\\r\\n\\r\\n        balance += msg.value;\\r\\n        emit ProposalAction(\\r\\n            msg.sender,\\r\\n            STAKEHOLDER_ROLE,\\r\\n            \\\"CONTRIBUTION SUCCESSFULLY RECEIVED!\\\",\\r\\n            address(this),\\r\\n            msg.value\\r\\n        );\\r\\n\\r\\n\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n        // get single proposal\\r\\n    function getProposals(uint256 proposalID) external view returns(Proposals memory) {\\r\\n        return raisedProposals[proposalID];\\r\\n    }\\r\\n\\r\\n    // get all proposals\\r\\n    function getAllProposals() external view returns(Proposals[] memory props){\\r\\n        props = new Proposals[](totalProposals);\\r\\n        for (uint i = 0; i < totalProposals; i++) {\\r\\n            props[i] = raisedProposals[i];\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    // get a specific proposal votes\\r\\n    function getProposalVote(uint256 proposalID) external view returns(Voted[] memory){\\r\\n        return votedOn[proposalID];\\r\\n    }\\r\\n\\r\\n    // get stakeholders votes\\r\\n    function getStakeholdersVotes() stakeholderOnly(\\\"Unauthorized\\\") external view returns(uint256[] memory){\\r\\n        return stakeholderVotes[msg.sender];\\r\\n    }\\r\\n\\r\\n    // get stakeholders balances\\r\\n    function getStakeholdersBalances() stakeholderOnly(\\\"unauthorized\\\") external view returns(uint256){\\r\\n        return stakeholders[msg.sender];\\r\\n\\r\\n    }\\r\\n\\r\\n     // get total balances\\r\\n    function getTotalBalance() external view returns(uint256){\\r\\n        return balance;\\r\\n\\r\\n    }\\r\\n\\r\\n    // check if stakeholder\\r\\n    function stakeholderStatus() external view returns(bool){\\r\\n        return stakeholders[msg.sender] > 0;\\r\\n    }\\r\\n\\r\\n    // check if contributor\\r\\n    function isContributor() external view returns(bool){\\r\\n        return contributors[msg.sender] > 0;\\r\\n    }\\r\\n\\r\\n    // check contributors balance\\r\\n    function getContributorsBalance() contributorOnly(\\\"unathorized\\\") external view returns(uint256){\\r\\n        return contributors[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getDeployer()external view returns(address){\\r\\n        return deployer;\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x79883c5a2bcf8d720a77ec6cab326d60087c56bbfc3ee4777e368d52ff6882b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405267016345785d8a000060809081525061012c60a0908152507fd3cd73767648ee32815639d235132b56387142ddb995e593e7f0b0db442a7d4860c0908152507f193aaa92f8a12e564bc860f8d10b1c1f937927ff6a6e804d359875acec3e5a5a60e09081525034801561007757600080fd5b506001808190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060805160a05160c05160e051613cc661014d600039600081816105cd0152818161092e01528181610dae01528181610f27015281816110c301528181611525015281816117b201528181611c3401528181611d7201528181611f67015261202b0152600081816113e001528181611d9d0152611e230152600061104001526000611cae0152613cc66000f3fe60806040526004361061012a5760003560e01c80637cdc2eb7116100ab578063cceb68f51161006f578063cceb68f514610440578063d547741f1461046b578063d6cc801614610494578063d7bb99ba146104bf578063f43327d2146104dd578063ff4b0db7146105085761012a565b80637cdc2eb71461033357806383047f801461037057806391d148541461039b578063a217fddf146103d8578063b31f111c146104035761012a565b80632c72fdfc116100f25780632c72fdfc1461024e5780632f2ff15d1461028b578063341edbed146102b457806336568abe146102df57806372630531146103085761012a565b806301ffc9a71461012f578063119c37c81461016c57806312b58349146101a95780631c9b2f35146101d4578063248a9ca314610211575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906127be565b610533565b6040516101639190612806565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190612857565b6105ad565b6040516101a09190612893565b60405180910390f35b3480156101b557600080fd5b506101be61097d565b6040516101cb9190612893565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612857565b610987565b60405161020891906129fe565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190612a56565b610a74565b6040516102459190612a92565b60405180910390f35b34801561025a57600080fd5b5061027560048036038101906102709190612857565b610a93565b6040516102829190612c69565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190612cb7565b610d4f565b005b3480156102c057600080fd5b506102c9610d71565b6040516102d69190612893565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190612cb7565b610e5c565b005b34801561031457600080fd5b5061031d610ed7565b60405161032a9190612d06565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190612d86565b610f01565b6040516103679190612c69565b60405180910390f35b34801561037c57600080fd5b506103856113a3565b6040516103929190612893565b60405180910390f35b3480156103a757600080fd5b506103c260048036038101906103bd9190612cb7565b61148e565b6040516103cf9190612806565b60405180910390f35b3480156103e457600080fd5b506103ed6114f8565b6040516103fa9190612a92565b60405180910390f35b34801561040f57600080fd5b5061042a60048036038101906104259190612e59565b6114ff565b6040516104379190612edb565b60405180910390f35b34801561044c57600080fd5b50610455611837565b60405161046291906130c3565b60405180910390f35b34801561047757600080fd5b50610492600480360381019061048d9190612cb7565b611b80565b005b3480156104a057600080fd5b506104a9611ba2565b6040516104b69190612806565b60405180910390f35b6104c7611beb565b6040516104d49190612893565b60405180910390f35b3480156104e957600080fd5b506104f2611fa5565b6040516104ff9190612806565b60405180910390f35b34801561051457600080fd5b5061051d611fee565b60405161052a9190613194565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a657506105a582612127565b5b9050919050565b6000604051806060016040528060228152602001613c3e602291396105f27f00000000000000000000000000000000000000000000000000000000000000003361148e565b8190610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9190613200565b60405180910390fd5b506040518060400160405280601e81526020017f4f6e6c79206465706c6f7965722063616e206d616b65207061796d656e740000815250600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161481906106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f59190613200565b60405180910390fd5b50610707612191565b600060056000868152602001908152602001600020905080600101546003541015610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e9061326e565b60405180910390fd5b600115158160070160009054906101000a900460ff161515036107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b6906132da565b60405180910390fd5b8060030154816002015411610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090613346565b60405180910390fd5b61083b81600101548260070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166121d7565b5060018160070160006101000a81548160ff021916908315150217905550338160090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010154600360008282546108b29190613395565b925050819055508060070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f00000000000000000000000000000000000000000000000000000000000000008460010154604051610960929190613415565b60405180910390a360035493505061097661228f565b5050919050565b6000600354905090565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610a6957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050815260200190600101906109bc565b505050509050919050565b6000806000838152602001908152602001600020600101549050919050565b610a9b61267c565b60056000838152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054610afc90613480565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2890613480565b8015610b755780601f10610b4a57610100808354040283529160200191610b75565b820191906000526020600020905b815481529060010190602001808311610b5857829003601f168201915b50505050508152602001600682018054610b8e90613480565b80601f0160208091040260200160405190810160405280929190818152602001828054610bba90613480565b8015610c075780601f10610bdc57610100808354040283529160200191610c07565b820191906000526020600020905b815481529060010190602001808311610bea57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b610d5882610a74565b610d6181612298565b610d6b83836122ac565b50505050565b60006040518060400160405280600c81526020017f756e617574686f72697a65640000000000000000000000000000000000000000815250610dd37f00000000000000000000000000000000000000000000000000000000000000003361148e565b8190610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9190613200565b60405180910390fd5b50600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505090565b610e6461239d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ec8576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ed282826123a5565b505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f0961267c565b604051806060016040528060318152602001613c6060319139610f4c7f00000000000000000000000000000000000000000000000000000000000000003361148e565b8190610f8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f859190613200565b60405180910390fd5b50600060026000815480929190610fa4906134b1565b91905055905060006005600083815260200190815260200160002090508181600001819055508481600101819055508989826005019182610fe69291906136df565b508787826006019182610ffa9291906136df565b50858160070160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f00000000000000000000000000000000000000000000000000000000000000004261106a91906137af565b81600401819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f0000000000000000000000000000000000000000000000000000000000000000886040516110f192919061382f565b60405180910390a38060405180610180016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201805461114890613480565b80601f016020809104026020016040519081016040528092919081815260200182805461117490613480565b80156111c15780601f10611196576101008083540402835291602001916111c1565b820191906000526020600020905b8154815290600101906020018083116111a457829003601f168201915b505050505081526020016006820180546111da90613480565b80601f016020809104026020016040519081016040528092919081815260200182805461120690613480565b80156112535780601f1061122857610100808354040283529160200191611253565b820191906000526020600020905b81548152906001019060200180831161123657829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505093505050509695505050505050565b60006040518060400160405280600b81526020017f756e6174686f72697a65640000000000000000000000000000000000000000008152506114057f00000000000000000000000000000000000000000000000000000000000000003361148e565b8190611447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143e9190613200565b60405180910390fd5b50600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b611507612723565b604051806060016040528060248152602001613c1a6024913961154a7f00000000000000000000000000000000000000000000000000000000000000003361148e565b819061158c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115839190613200565b60405180910390fd5b5060006005600086815260200190815260200160002090506115ad81612497565b83156115d2578060020160008154809291906115c8906134b1565b91905055506115ed565b8060030160008154809291906115e7906134b1565b91905055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600001549080600181540180825580915050600190039060005260206000200160009091909190915055600760008260000154815260200190815260200160002060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001428152602001861515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555050508060070160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f547e0c985508bf44e88e036a89b60fb24d98f87250028cb1b4f9991ab734e6957f00000000000000000000000000000000000000000000000000000000000000008460010154856002015486600301548a6040516117f29594939291906138b7565b60405180910390a360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018515158152509250505092915050565b606060025467ffffffffffffffff81111561185557611854613504565b5b60405190808252806020026020018201604052801561188e57816020015b61187b61267c565b8152602001906001900390816118735790505b50905060005b600254811015611b7c57600560008281526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820180546118ff90613480565b80601f016020809104026020016040519081016040528092919081815260200182805461192b90613480565b80156119785780601f1061194d57610100808354040283529160200191611978565b820191906000526020600020905b81548152906001019060200180831161195b57829003601f168201915b5050505050815260200160068201805461199190613480565b80601f01602080910402602001604051908101604052809291908181526020018280546119bd90613480565b8015611a0a5780601f106119df57610100808354040283529160200191611a0a565b820191906000526020600020905b8154815290600101906020018083116119ed57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016007820160019054906101000a900460ff161515151581526020016007820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110611b5e57611b5d61391d565b5b60200260200101819052508080611b74906134b1565b915050611894565b5090565b611b8982610a74565b611b9281612298565b611b9c83836123a5565b50505050565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b6000803411611c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2690613998565b60405180910390fd5b611c597f00000000000000000000000000000000000000000000000000000000000000003361148e565b611e5057600034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611caa91906137af565b90507f00000000000000000000000000000000000000000000000000000000000000008110611dc85734600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d6691906137af565b92505081905550611d977f0000000000000000000000000000000000000000000000000000000000000000336122ac565b50611dc27f0000000000000000000000000000000000000000000000000000000000000000336122ac565b50611e4a565b34600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e1791906137af565b92505081905550611e487f0000000000000000000000000000000000000000000000000000000000000000336122ac565b505b50611efd565b34600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e9f91906137af565b9250508190555034600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ef591906137af565b925050819055505b3460036000828254611f0f91906137af565b925050819055503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f73a1cb60f50f2e728bc99e4885df312cacdf69558d195a114a0e37d2836696a37f000000000000000000000000000000000000000000000000000000000000000034604051611f95929190613a2a565b60405180910390a3600354905090565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b60606040518060400160405280600c81526020017f556e617574686f72697a656400000000000000000000000000000000000000008152506120507f00000000000000000000000000000000000000000000000000000000000000003361148e565b8190612092576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120899190613200565b60405180910390fd5b50600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561211c57602002820191906000526020600020905b815481526020019060010190808311612108575b505050505091505090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6002600154036121cd576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b6000808273ffffffffffffffffffffffffffffffffffffffff16846040516121fe90613a97565b60006040518083038185875af1925050503d806000811461223b576040519150601f19603f3d011682016040523d82523d6000602084013e612240565b606091505b5050905080612284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227b90613af8565b60405180910390fd5b600191505092915050565b60018081905550565b6122a9816122a461239d565b61262b565b50565b60006122b8838361148e565b61239257600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061232f61239d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050612397565b600090505b92915050565b600033905090565b60006123b1838361148e565b1561248c57600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061242961239d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050612491565b600090505b92915050565b8060070160019054906101000a900460ff16806124b8575042816004015411155b156125155760018160070160016101000a81548160ff0219169083151502179055506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250c90613b64565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156125a057602002820191906000526020600020905b81548152602001906001019080831161258c575b5050505050905060005b8151811015612626578181815181106125c6576125c561391d565b5b6020026020010151836000015403612613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260a90613bd0565b60405180910390fd5b808061261e906134b1565b9150506125aa565b505050565b612635828261148e565b6126785780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161266f929190613bf0565b60405180910390fd5b5050565b60405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61279b81612766565b81146127a657600080fd5b50565b6000813590506127b881612792565b92915050565b6000602082840312156127d4576127d361275c565b5b60006127e2848285016127a9565b91505092915050565b60008115159050919050565b612800816127eb565b82525050565b600060208201905061281b60008301846127f7565b92915050565b6000819050919050565b61283481612821565b811461283f57600080fd5b50565b6000813590506128518161282b565b92915050565b60006020828403121561286d5761286c61275c565b5b600061287b84828501612842565b91505092915050565b61288d81612821565b82525050565b60006020820190506128a86000830184612884565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612905826128da565b9050919050565b612915816128fa565b82525050565b61292481612821565b82525050565b612933816127eb565b82525050565b60608201600082015161294f600085018261290c565b506020820151612962602085018261291b565b506040820151612975604085018261292a565b50505050565b60006129878383612939565b60608301905092915050565b6000602082019050919050565b60006129ab826128ae565b6129b581856128b9565b93506129c0836128ca565b8060005b838110156129f15781516129d8888261297b565b97506129e383612993565b9250506001810190506129c4565b5085935050505092915050565b60006020820190508181036000830152612a1881846129a0565b905092915050565b6000819050919050565b612a3381612a20565b8114612a3e57600080fd5b50565b600081359050612a5081612a2a565b92915050565b600060208284031215612a6c57612a6b61275c565b5b6000612a7a84828501612a41565b91505092915050565b612a8c81612a20565b82525050565b6000602082019050612aa76000830184612a83565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ae7578082015181840152602081019050612acc565b60008484015250505050565b6000601f19601f8301169050919050565b6000612b0f82612aad565b612b198185612ab8565b9350612b29818560208601612ac9565b612b3281612af3565b840191505092915050565b6000612b48826128da565b9050919050565b612b5881612b3d565b82525050565b600061018083016000830151612b77600086018261291b565b506020830151612b8a602086018261291b565b506040830151612b9d604086018261291b565b506060830151612bb0606086018261291b565b506080830151612bc3608086018261291b565b5060a083015184820360a0860152612bdb8282612b04565b91505060c083015184820360c0860152612bf58282612b04565b91505060e0830151612c0a60e086018261292a565b50610100830151612c1f61010086018261292a565b50610120830151612c34610120860182612b4f565b50610140830151612c4961014086018261290c565b50610160830151612c5e61016086018261290c565b508091505092915050565b60006020820190508181036000830152612c838184612b5e565b905092915050565b612c94816128fa565b8114612c9f57600080fd5b50565b600081359050612cb181612c8b565b92915050565b60008060408385031215612cce57612ccd61275c565b5b6000612cdc85828601612a41565b9250506020612ced85828601612ca2565b9150509250929050565b612d00816128fa565b82525050565b6000602082019050612d1b6000830184612cf7565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612d4657612d45612d21565b5b8235905067ffffffffffffffff811115612d6357612d62612d26565b5b602083019150836001820283011115612d7f57612d7e612d2b565b5b9250929050565b60008060008060008060808789031215612da357612da261275c565b5b600087013567ffffffffffffffff811115612dc157612dc0612761565b5b612dcd89828a01612d30565b9650965050602087013567ffffffffffffffff811115612df057612def612761565b5b612dfc89828a01612d30565b94509450506040612e0f89828a01612ca2565b9250506060612e2089828a01612842565b9150509295509295509295565b612e36816127eb565b8114612e4157600080fd5b50565b600081359050612e5381612e2d565b92915050565b60008060408385031215612e7057612e6f61275c565b5b6000612e7e85828601612842565b9250506020612e8f85828601612e44565b9150509250929050565b606082016000820151612eaf600085018261290c565b506020820151612ec2602085018261291b565b506040820151612ed5604085018261292a565b50505050565b6000606082019050612ef06000830184612e99565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061018083016000830151612f3b600086018261291b565b506020830151612f4e602086018261291b565b506040830151612f61604086018261291b565b506060830151612f74606086018261291b565b506080830151612f87608086018261291b565b5060a083015184820360a0860152612f9f8282612b04565b91505060c083015184820360c0860152612fb98282612b04565b91505060e0830151612fce60e086018261292a565b50610100830151612fe361010086018261292a565b50610120830151612ff8610120860182612b4f565b5061014083015161300d61014086018261290c565b5061016083015161302261016086018261290c565b508091505092915050565b60006130398383612f22565b905092915050565b6000602082019050919050565b600061305982612ef6565b6130638185612f01565b93508360208202850161307585612f12565b8060005b858110156130b15784840389528151613092858261302d565b945061309d83613041565b925060208a01995050600181019050613079565b50829750879550505050505092915050565b600060208201905081810360008301526130dd818461304e565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061311d838361291b565b60208301905092915050565b6000602082019050919050565b6000613141826130e5565b61314b81856130f0565b935061315683613101565b8060005b8381101561318757815161316e8882613111565b975061317983613129565b92505060018101905061315a565b5085935050505092915050565b600060208201905081810360008301526131ae8184613136565b905092915050565b600082825260208201905092915050565b60006131d282612aad565b6131dc81856131b6565b93506131ec818560208601612ac9565b6131f581612af3565b840191505092915050565b6000602082019050818103600083015261321a81846131c7565b905092915050565b7f696e73756666696369656e742066756e64000000000000000000000000000000600082015250565b60006132586011836131b6565b915061326382613222565b602082019050919050565b600060208201905081810360008301526132878161324b565b9050919050565b7f7061796d656e7420616c7265616479206d616465000000000000000000000000600082015250565b60006132c46014836131b6565b91506132cf8261328e565b602082019050919050565b600060208201905081810360008301526132f3816132b7565b9050919050565b7f696e73756666696369656e7420766f7465730000000000000000000000000000600082015250565b60006133306012836131b6565b915061333b826132fa565b602082019050919050565b6000602082019050818103600083015261335f81613323565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133a082612821565b91506133ab83612821565b92508282039050818111156133c3576133c2613366565b5b92915050565b7f5041594d454e54205355434345535346554c4c59204d41444521000000000000600082015250565b60006133ff601a836131b6565b915061340a826133c9565b602082019050919050565b600060608201905061342a6000830185612a83565b818103602083015261343b816133f2565b905061344a6040830184612884565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061349857607f821691505b6020821081036134ab576134aa613451565b5b50919050565b60006134bc82612821565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134ee576134ed613366565b5b600182019050919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026135957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613558565b61359f8683613558565b95508019841693508086168417925050509392505050565b6000819050919050565b60006135dc6135d76135d284612821565b6135b7565b612821565b9050919050565b6000819050919050565b6135f6836135c1565b61360a613602826135e3565b848454613565565b825550505050565b600090565b61361f613612565b61362a8184846135ed565b505050565b5b8181101561364e57613643600082613617565b600181019050613630565b5050565b601f8211156136935761366481613533565b61366d84613548565b8101602085101561367c578190505b61369061368885613548565b83018261362f565b50505b505050565b600082821c905092915050565b60006136b660001984600802613698565b1980831691505092915050565b60006136cf83836136a5565b9150826002028217905092915050565b6136e983836134f9565b67ffffffffffffffff81111561370257613701613504565b5b61370c8254613480565b613717828285613652565b6000601f8311600181146137465760008415613734578287013590505b61373e85826136c3565b8655506137a6565b601f19841661375486613533565b60005b8281101561377c57848901358255600182019150602085019450602081019050613757565b868310156137995784890135613795601f8916826136a5565b8355505b6001600288020188555050505b50505050505050565b60006137ba82612821565b91506137c583612821565b92508282019050808211156137dd576137dc613366565b5b92915050565b7f50726f706f73616c205261697365640000000000000000000000000000000000600082015250565b6000613819600f836131b6565b9150613824826137e3565b602082019050919050565b60006060820190506138446000830185612a83565b81810360208301526138558161380c565b90506138646040830184612884565b9392505050565b7f50524f504f53414c20564f544500000000000000000000000000000000000000600082015250565b60006138a1600d836131b6565b91506138ac8261386b565b602082019050919050565b600060c0820190506138cc6000830188612a83565b81810360208301526138dd81613894565b90506138ec6040830187612884565b6138f96060830186612884565b6139066080830185612884565b61391360a08301846127f7565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6000613982600e836131b6565b915061398d8261394c565b602082019050919050565b600060208201905081810360008301526139b181613975565b9050919050565b7f434f4e545249425554494f4e205355434345535346554c4c592052454345495660008201527f4544210000000000000000000000000000000000000000000000000000000000602082015250565b6000613a146023836131b6565b9150613a1f826139b8565b604082019050919050565b6000606082019050613a3f6000830185612a83565b8181036020830152613a5081613a07565b9050613a5f6040830184612884565b9392505050565b600081905092915050565b50565b6000613a81600083613a66565b9150613a8c82613a71565b600082019050919050565b6000613aa282613a74565b9150819050919050565b7f7061796d656e74206661696c6564000000000000000000000000000000000000600082015250565b6000613ae2600e836131b6565b9150613aed82613aac565b602082019050919050565b60006020820190508181036000830152613b1181613ad5565b9050919050565b7f54696d652068617320616c726561647920706173736564000000000000000000600082015250565b6000613b4e6017836131b6565b9150613b5982613b18565b602082019050919050565b60006020820190508181036000830152613b7d81613b41565b9050919050565b7f646f75626c6520766f74696e67206973206e6f7420616c6c6f77656400000000600082015250565b6000613bba601c836131b6565b9150613bc582613b84565b602082019050919050565b60006020820190508181036000830152613be981613bad565b9050919050565b6000604082019050613c056000830185612cf7565b613c126020830184612a83565b939250505056fe4f6e6c79207374616b65686f6c646572732063616e20706572666f726d20766f74696e674f6e6c79207374616b65686f6c646572732063616e206d616b65207061796d656e744f6e6c79207374616b65686f6c646572732061726520616c6c6f77656420746f206372656174652050726f706f73616c73a26469706673582212205b500c37604601232a2c53c41a7c05c25ecb490dad351b4578dc4d3109bea3c064736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 411,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 515,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "totalProposals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 517,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "balance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 519,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "deployer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 540,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "raisedProposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Proposals)584_storage)"
      },
      {
        "astId": 545,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "stakeholderVotes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 551,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "votedOn",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_struct(Voted)591_storage)dyn_storage)"
      },
      {
        "astId": 555,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "contributors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 559,
        "contract": "contracts/Dao.sol:CeloDao",
        "label": "stakeholders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Voted)591_storage)dyn_storage": {
        "base": "t_struct(Voted)591_storage",
        "encoding": "dynamic_array",
        "label": "struct CeloDao.Voted[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Voted)591_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CeloDao.Voted[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Voted)591_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Proposals)584_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CeloDao.Proposals)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposals)584_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposals)584_storage": {
        "encoding": "inplace",
        "label": "struct CeloDao.Proposals",
        "members": [
          {
            "astId": 561,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 563,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 565,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "upVote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 567,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "downVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 569,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 571,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "title",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 573,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "description",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 575,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "paid",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 577,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "passed",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 579,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "beneficiary",
            "offset": 2,
            "slot": "7",
            "type": "t_address_payable"
          },
          {
            "astId": 581,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "propoper",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 583,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "executor",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voted)591_storage": {
        "encoding": "inplace",
        "label": "struct CeloDao.Voted",
        "members": [
          {
            "astId": 586,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 588,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 590,
            "contract": "contracts/Dao.sol:CeloDao",
            "label": "chosen",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
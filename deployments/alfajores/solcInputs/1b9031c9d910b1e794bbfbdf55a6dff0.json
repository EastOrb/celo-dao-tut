{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Dao.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract CeloDao is AccessControl,ReentrancyGuard {\r\n\r\n    uint256 totalProposals;\r\n    uint256 balance;\r\n    address deployer;\r\n\r\n    uint256 immutable STAKEHOLDER_MIN_CONTRIBUTION = 0.1 ether;\r\n    uint256 immutable MIN_VOTE_PERIOD = 5 minutes;\r\n    bytes32 private immutable COLLABORATOR_ROLE = keccak256(\"collaborator\");\r\n    bytes32 private immutable STAKEHOLDER_ROLE = keccak256(\"stakeholder\");\r\n\r\n    mapping(uint256 => Proposals) private raisedProposals;\r\n    mapping(address => uint256[]) private stakeholderVotes;\r\n    mapping(uint256 => Voted[]) private votedOn;\r\n    mapping(address => uint256) private contributors;\r\n    mapping(address => uint256) private stakeholders;\r\n\r\n      struct Proposals {\r\n        uint256 id;\r\n        uint256 amount;\r\n        uint256 upVote;\r\n        uint256 downVotes;\r\n        uint256 duration;\r\n        string title;\r\n        string description;\r\n        bool paid;\r\n        bool passed;\r\n        address payable beneficiary;\r\n        address propoper;\r\n        address executor;\r\n    }\r\n\r\n     struct Voted {\r\n        address voter;\r\n        uint256 timestamp;\r\n        bool chosen;\r\n    }\r\n\r\n     modifier stakeholderOnly(string memory message) {\r\n        require(hasRole(STAKEHOLDER_ROLE,msg.sender),message);\r\n        _;\r\n    }\r\n    modifier contributorOnly(string memory message){\r\n        require(hasRole(COLLABORATOR_ROLE,msg.sender),message);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDeployer(string memory message) {\r\n        require(msg.sender == deployer,message);\r\n\r\n        _;\r\n    }\r\n\r\n     event ProposalAction(\r\n        address indexed creator,\r\n        bytes32 role,\r\n        string message,\r\n        address indexed beneficiary,\r\n        uint256 amount\r\n    );\r\n\r\n     event VoteAction(\r\n        address indexed creator,\r\n        bytes32 role,\r\n        string message,\r\n        address indexed beneficiary,\r\n        uint256 amount,\r\n        uint256 upVote,\r\n        uint256 downVotes,\r\n        bool chosen\r\n    );\r\n\r\n     constructor(){\r\n        deployer = msg.sender;\r\n    }\r\n\r\n       // proposal creation\r\n    function createProposal (\r\n        string calldata title,\r\n        string calldata description,\r\n        address beneficiary,\r\n        uint256 amount\r\n    )external stakeholderOnly(\"Only stakeholders are allowed to create Proposals\") returns(Proposals memory){\r\n        uint256 currentID = totalProposals++;\r\n        Proposals storage StakeholderProposal = raisedProposals[currentID];\r\n        StakeholderProposal.id = currentID;\r\n        StakeholderProposal.amount = amount;\r\n        StakeholderProposal.title = title;\r\n        StakeholderProposal.description = description;\r\n        StakeholderProposal.beneficiary = payable(beneficiary);\r\n        StakeholderProposal.duration = block.timestamp + MIN_VOTE_PERIOD;\r\n\r\n        emit ProposalAction(\r\n            msg.sender,\r\n            STAKEHOLDER_ROLE,\r\n            'Proposal Raised',\r\n            beneficiary,\r\n            amount\r\n        );\r\n        return StakeholderProposal;\r\n    }\r\n\r\n    \r\n    // voting\r\n    function performVote(uint256 proposalId,bool chosen) external\r\n    stakeholderOnly(\"Only stakeholders can perform voting\")\r\n    returns(Voted memory)\r\n    {\r\n        Proposals storage StakeholderProposal = raisedProposals[proposalId];\r\n        handleVoting(StakeholderProposal);\r\n        if(chosen) StakeholderProposal.upVote++;\r\n        else StakeholderProposal.downVotes++;\r\n\r\n        stakeholderVotes[msg.sender].push(\r\n            StakeholderProposal.id\r\n        );\r\n        votedOn[StakeholderProposal.id].push(\r\n            Voted(\r\n                msg.sender,\r\n                block.timestamp,\r\n                chosen\r\n            )\r\n        );\r\n\r\n        emit VoteAction(\r\n            msg.sender,\r\n            STAKEHOLDER_ROLE,\r\n            \"PROPOSAL VOTE\",\r\n            StakeholderProposal.beneficiary,\r\n            StakeholderProposal.amount,\r\n            StakeholderProposal.upVote,\r\n            StakeholderProposal.downVotes,\r\n            chosen\r\n        );\r\n\r\n        return Voted(\r\n            msg.sender,\r\n            block.timestamp,\r\n            chosen\r\n        );\r\n\r\n    }\r\n\r\n    // handling vote\r\n    function handleVoting(Proposals storage proposal) private {\r\n        if (proposal.passed || proposal.duration <= block.timestamp) {\r\n            proposal.passed = true;\r\n            revert(\"Time has already passed\");\r\n        }\r\n        uint256[] memory tempVotes = stakeholderVotes[msg.sender];\r\n        for (uint256 vote = 0; vote < tempVotes.length; vote++) {\r\n            if (proposal.id == tempVotes[vote])\r\n                revert(\"double voting is not allowed\");\r\n        }\r\n\r\n    }\r\n\r\n     // pay beneficiary\r\n    function payBeneficiary(uint proposalId) external\r\n    stakeholderOnly(\"Only stakeholders can make payment\") onlyDeployer(\"Only deployer can make payment\") nonReentrant() returns(uint256){\r\n        Proposals storage stakeholderProposal = raisedProposals[proposalId];\r\n        require(balance >= stakeholderProposal.amount, \"insufficient fund\");\r\n        if(stakeholderProposal.paid == true) revert(\"payment already made\");\r\n        if(stakeholderProposal.upVote <= stakeholderProposal.downVotes) revert(\"insufficient votes\");\r\n\r\n        pay(stakeholderProposal.amount,stakeholderProposal.beneficiary);\r\n        stakeholderProposal.paid = true;\r\n        stakeholderProposal.executor = msg.sender;\r\n        balance -= stakeholderProposal.amount;\r\n\r\n        emit ProposalAction(\r\n            msg.sender,\r\n            STAKEHOLDER_ROLE,\r\n            \"PAYMENT SUCCESSFULLY MADE!\",\r\n            stakeholderProposal.beneficiary,\r\n            stakeholderProposal.amount\r\n        );\r\n\r\n        return balance;\r\n\r\n    }\r\n\r\n    // paymment functionality\r\n    function pay(uint256 amount,address to) internal returns(bool){\r\n        (bool success,) = payable(to).call{value : amount}(\"\");\r\n        require(success, \"payment failed\");\r\n        return true;\r\n    }\r\n\r\n      // contribution functionality\r\n    function contribute() payable external returns(uint256){\r\n        require(msg.value > 0 ether, \"invalid amount\");\r\n        if (!hasRole(STAKEHOLDER_ROLE, msg.sender)) {\r\n            uint256 totalContributions = contributors[msg.sender] + msg.value;\r\n\r\n            if (totalContributions >= STAKEHOLDER_MIN_CONTRIBUTION) {\r\n                stakeholders[msg.sender] = msg.value;\r\n                contributors[msg.sender] += msg.value;\r\n                 _grantRole(STAKEHOLDER_ROLE,msg.sender);\r\n                 _grantRole(COLLABORATOR_ROLE, msg.sender);\r\n            }\r\n            else {\r\n                contributors[msg.sender] += msg.value;\r\n                 _grantRole(COLLABORATOR_ROLE,msg.sender);\r\n            }\r\n        }\r\n        else{\r\n            stakeholders[msg.sender] += msg.value;\r\n            contributors[msg.sender] += msg.value;\r\n        }\r\n\r\n        balance += msg.value;\r\n        emit ProposalAction(\r\n            msg.sender,\r\n            STAKEHOLDER_ROLE,\r\n            \"CONTRIBUTION SUCCESSFULLY RECEIVED!\",\r\n            address(this),\r\n            msg.value\r\n        );\r\n\r\n\r\n        return balance;\r\n    }\r\n\r\n        // get single proposal\r\n    function getProposals(uint256 proposalID) external view returns(Proposals memory) {\r\n        return raisedProposals[proposalID];\r\n    }\r\n\r\n    // get all proposals\r\n    function getAllProposals() external view returns(Proposals[] memory props){\r\n        props = new Proposals[](totalProposals);\r\n        for (uint i = 0; i < totalProposals; i++) {\r\n            props[i] = raisedProposals[i];\r\n        }\r\n\r\n    }\r\n\r\n    // get a specific proposal votes\r\n    function getProposalVote(uint256 proposalID) external view returns(Voted[] memory){\r\n        return votedOn[proposalID];\r\n    }\r\n\r\n    // get stakeholders votes\r\n    function getStakeholdersVotes() stakeholderOnly(\"Unauthorized\") external view returns(uint256[] memory){\r\n        return stakeholderVotes[msg.sender];\r\n    }\r\n\r\n    // get stakeholders balances\r\n    function getStakeholdersBalances() stakeholderOnly(\"unauthorized\") external view returns(uint256){\r\n        return stakeholders[msg.sender];\r\n\r\n    }\r\n\r\n     // get total balances\r\n    function getTotalBalance() external view returns(uint256){\r\n        return balance;\r\n\r\n    }\r\n\r\n    // check if stakeholder\r\n    function stakeholderStatus() external view returns(bool){\r\n        return stakeholders[msg.sender] > 0;\r\n    }\r\n\r\n    // check if contributor\r\n    function isContributor() external view returns(bool){\r\n        return contributors[msg.sender] > 0;\r\n    }\r\n\r\n    // check contributors balance\r\n    function getContributorsBalance() contributorOnly(\"unathorized\") external view returns(uint256){\r\n        return contributors[msg.sender];\r\n    }\r\n\r\n    function getDeployer()external view returns(address){\r\n        return deployer;\r\n\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}